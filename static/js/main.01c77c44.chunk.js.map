{"version":3,"sources":["components/Section/Section.jsx","components/FeedbackOptions/FeedbackOptions.jsx","components/Notification/Notification.jsx","components/Statistics/Statistics.jsx","App.js","index.js"],"names":["Section","title","children","FeedbackOptions","options","onLeaveFeedback","Object","keys","map","option","onClick","type","Notification","message","Statistics","good","neutral","bad","total","positivePercentage","Math","round","App","state","countTotalFeedback","countPositiveFeedbackPercentage","percents","isNaN","setState","prevState","this","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+PASeA,EATC,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACxB,OACE,oCACE,6BAAKD,IACJC,MCcQC,EAhBS,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,gBAClC,OACE,cAAC,EAAD,CAASJ,MAAM,wBAAf,SACGK,OAAOC,KAAKH,GAASI,KAAI,SAAAC,GAAM,OAC9B,wBACEC,QAAS,kBAAML,EAAgBI,IAC/BE,KAAK,SAFP,SAKGF,GAFIA,SCLAG,EAJM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACtB,OAAO,4BAAIA,KCmBEC,EAjBI,SAAC,GAAuD,IAArDC,EAAoD,EAApDA,KAAMC,EAA8C,EAA9CA,QAASC,EAAqC,EAArCA,IAAKC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,mBAC/C,OACE,qCACa,IAAVD,GAAe,cAAC,EAAD,CAAcL,QAAQ,yBACrCK,EAAQ,GACP,eAAC,EAAD,CAASjB,MAAM,aAAf,UACE,uCAAUc,KACV,0CAAaC,KACb,sCAASC,KACT,wCAAWC,KACX,oDAAuBE,KAAKC,MAAMF,GAAlC,cCTJG,E,4MACJC,MAAQ,CACNR,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPO,mBAAqB,WACnB,MAA+B,EAAKD,MAEpC,OAFA,EAAQR,KAAR,EAAcC,QAAd,EAAuBC,K,EAKzBQ,gCAAkC,WAChC,IAEIC,EAAW,EAGf,OAFAA,EAAY,IAHK,EAAKH,MAAdR,KAGkB,EAAKS,qBAE3BG,MAAMD,GACW,EAGjBA,GAAY,IACK,IAGdA,G,EAGTrB,gBAAkB,SAAAI,GAChB,EAAKmB,UAAS,SAAAC,GAAS,sBAAQpB,EAASoB,EAAUpB,GAAU,O,4CAG9D,WACE,OACE,oCACE,cAAC,EAAD,CACEL,QAAS0B,KAAKP,MACdlB,gBAAiByB,KAAKzB,kBAGxB,cAAC,EAAD,CACEU,KAAMe,KAAKP,MAAMR,KACjBC,QAASc,KAAKP,MAAMP,QACpBC,IAAKa,KAAKP,MAAMN,IAChBC,MAAOY,KAAKN,qBACZL,mBAAoBW,KAAKL,2C,GA/CjBM,aAsDHT,ICrDfU,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.01c77c44.chunk.js","sourcesContent":["const Section = ({ title, children }) => {\n  return (\n    <section>\n      <h2>{title}</h2>\n      {children}\n    </section>\n  );\n};\n\nexport default Section;\n\n// import { Component } from \"react\";\n// import FeedbackOptions from \"../FeedbackOptions/FeedbackOptions\";\n// import Statictics from \"../Statistics/Statistics\";\n\n// class Section extends Component {\n//   state = {\n//     good: 0,\n//     neutral: 0,\n//     bad: 0,\n//   };\n\n//   countTotalFeedback = () => {\n//     const { good, neutral, bad } = this.state;\n//     let total = good + neutral + bad;\n//     return total;\n//   };\n\n//   countPositiveFeedbackPercentage = () => {\n//     const { good } = this.state;\n\n//     let percents = 0;\n//     percents = (100 * good) / this.countTotalFeedback();\n\n//     if (isNaN(percents)) {\n//       return (percents = 0);\n//     }\n\n//     if (percents >= 100) {\n//       return (percents = 100);\n//     }\n\n//     return percents;\n//   };\n\n//   onLeaveFeedback = e => {\n//     const { good, neutral, bad } = this.state;\n//     this.setState(() => {\n//       if (e.target.textContent === \"Good\") return { good: good + 1 };\n//       if (e.target.textContent === \"Neutral\") return { neutral: neutral + 1 };\n//       if (e.target.textContent === \"Bad\") return { bad: bad + 1 };\n//     });\n//   };\n\n//   render() {\n//     return (\n//       <section>\n//         <h1>Please leave feedback</h1>\n//         <FeedbackOptions\n//           options={this.state}\n//           onLeaveFeedback={this.onLeaveFeedback()}\n//         />\n\n//         <Statictics\n//           good={this.state.good}\n//           neutral={this.state.neutral}\n//           bad={this.state.bad}\n//           total={this.countTotalFeedback()}\n//           positivePercentage={this.countPositiveFeedbackPercentage()}\n//         />\n//       </section>\n//     );\n//   }\n// }\n\n// export default Section;\n","import Section from \"../Section/Section\";\n\nconst FeedbackOptions = ({ options, onLeaveFeedback }) => {\n  return (\n    <Section title=\"Please leave feedback\">\n      {Object.keys(options).map(option => (\n        <button\n          onClick={() => onLeaveFeedback(option)}\n          type=\"button\"\n          key={option}\n        >\n          {option}\n        </button>\n      ))}\n    </Section>\n  );\n};\n\nexport default FeedbackOptions;\n","const Notification = ({ message }) => {\n  return <p>{message}</p>;\n};\n\nexport default Notification;\n","import Section from \"../Section/Section\";\nimport Notification from \"../Notification/Notification\";\n\nconst Statistics = ({ good, neutral, bad, total, positivePercentage }) => {\n  return (\n    <>\n      {total === 0 && <Notification message=\"There is no feedback\" />}\n      {total > 0 && (\n        <Section title=\"Statistics\">\n          <p>Good: {good}</p>\n          <p>Neutral: {neutral}</p>\n          <p>Bad: {bad}</p>\n          <p>Total: {total}</p>\n          <p>Positive feedback: {Math.round(positivePercentage)}%</p>\n        </Section>\n      )}\n    </>\n  );\n};\n\nexport default Statistics;\n","import { Component } from \"react\";\nimport FeedbackOptions from \"./components/FeedbackOptions/FeedbackOptions.jsx\";\nimport Statictics from \"./components/Statistics/Statistics.jsx\";\n\nclass App extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n  countTotalFeedback = () => {\n    const { good, neutral, bad } = this.state;\n    let total = good + neutral + bad;\n    return total;\n  };\n\n  countPositiveFeedbackPercentage = () => {\n    const { good } = this.state;\n\n    let percents = 0;\n    percents = (100 * good) / this.countTotalFeedback();\n\n    if (isNaN(percents)) {\n      return (percents = 0);\n    }\n\n    if (percents >= 100) {\n      return (percents = 100);\n    }\n\n    return percents;\n  };\n\n  onLeaveFeedback = option => {\n    this.setState(prevState => ({ [option]: prevState[option] + 1 }));\n  };\n\n  render() {\n    return (\n      <section>\n        <FeedbackOptions\n          options={this.state}\n          onLeaveFeedback={this.onLeaveFeedback}\n        />\n\n        <Statictics\n          good={this.state.good}\n          neutral={this.state.neutral}\n          bad={this.state.bad}\n          total={this.countTotalFeedback()}\n          positivePercentage={this.countPositiveFeedbackPercentage()}\n        />\n      </section>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}